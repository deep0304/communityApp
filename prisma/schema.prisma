// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
//created the user with the family
//user can have multiple families
// family will have the single family owner
// user can have multiple session for the sake of multiple device login
// providerId->stores the identifier(google,facebook etc)
//providertype-> category of authentication providers(OAuth, etc)
//providerAccountId-> unique identifier for each provider

model User {
    id                  Int         @id @default(autoincrement())
    email               String      @unique
    name                String?
    verifiedEmail       Boolean     @default(false)
    image               String?
    bio                 String?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    ifFamilyOwner       Boolean     @default(false)
    isActive            Boolean
    account             Account?
    families            Family[]
    session             Session[]
    familyOwner         FamilyOwner?
}
model Family{
    id                  Int         @id  @default(autoincrement())
    name                String
    image               String?
    bio                 String?
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    members             User[]
    familyOwner         FamilyOwner?
    isActive            Boolean
}


model Account{
    id                  Int         @id @default(autoincrement())
    userId              Int         @unique
    providerId          String
    providertype        String
    providerAccountId   String
    refreshToken        String
    accessToken         String
    accessTokenExpires  DateTime?
    isActive            Boolean
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    user User @relation(fields:[userId],references: [id])
    
}

model Session{
    id                  Int         @id @default(autoincrement())
    userId              Int         @unique
    expires             DateTime
    sessionToken        String?
    accessToken         String
    isActive            Boolean
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    user                User        @relation(fields: [userId], references: [id])
    
}
    
model VerificationRequest{
    id                  Int         @id @default(autoincrement())
    identifier          String
    token               String
    expires             DateTime    
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    
}    
model FamilyOwner{
    id                  Int         @id @default(autoincrement())
    userId              Int         @unique    
    familyId            Int         @unique
    isActive            Boolean
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    family              Family      @relation(fields: [familyId], references: [id])
    user                User        @relation(fields: [userId], references: [id])
    
}
